#!/system/bin/sh
# Terminal Magisk Mod Template
# by veez21 @ xda-developers


# Magisk Module ID **
# > ENTER MAGISK MODULE ID HERE
ID="IceWizard"

#=========================== Set Log Files
mount -o remount,rw /cache 2>/dev/null
mount -o rw,remount /cache 2>/dev/null
# > Logs should go in this file
LOG=/cache/${ID}.log
oldLOG=/cache/${ID}-old.log
# > Verbose output goes here
VERLOG=/cache/${ID}-verbose.log
oldVERLOG=/cache/${ID}-verbose-old.log

#=========================== Start Logging verbosely
mv -f $VERLOG $oldVERLOG 2>/dev/null; mv -f $LOG $oldLOG 2>/dev/null
set -x 2>$VERLOG

#=========================== Determine if A/B OTA device
if [ -d /system_root ]; then
	isABDevice=true
	SYSTEM=/system_root/system
	SYSTEM2=/system
else
	isABDevice=false
	SYSTEM=/system
	SYSTEM2=/system
fi

# Set Prop Directory
MAGISK=<MAGISK>
PROP=<PROP>
MODPROP=<MODPROP>
MODPATH=<MODPATH>
ROOT=<ROOT>
$MAGISK && [ ! -f $PROP ] && PROP=/sbin/.core/img/aml/system.prop
[ -f $MODPROP ] || { echo "Module not detected!"; exit 1; }

#=========================== Set Busybox (Used by Magisk) up
set_busybox() {
	if [ -x "$1" ]; then
		for i in $(${1} --list); do
			if [ "$i" != 'echo' ]; then
				alias "$i"="${1} $i" 2>>$LOG >>$LOG
			fi
		done
		_busybox=true
		_bb=$1
	fi
}
_busybox=false
if [ -d /sbin/.core/busybox ]; then
	PATH=$PATH:/sbin/.core/busybox
	_bb=/sbin/.core/busybox/busybox
	_busybox=true
elif [ ! -x $SYSTEM/xbin/busybox ]; then
	set_busybox /data/magisk/busybox
	set_busybox /data/adb/magisk/busybox
else
	alias busybox=""
fi
if [ -x $SYSTEM/xbin/busybox ]; then
	_bb=$SYSTEM/xbin/busybox
elif [ -x $SYSTEM/bin/busybox ]; then
	_bb=$SYSTEM/bin/busybox
elif [ $_busybox ]; then
	true
else
	echo "! Busybox not detected.."
	echo "Please install one (@osm0sis' busybox recommended)"
	false
fi
[ $? -ne 0 ] && exit $?
alias echo='echo -e'
[ -n "$LOGNAME" ] && alias clear='echo'
_bbname=$(busybox | head -n1)
_bbname=${_bbname%'('*}
BBok=true
if [ "$_bbname" == "" ]; then
	_bbname="BusyBox not found!"
	BBok=false
fi

#=========================== Default Functions and Variables

quit() {
  #=========================== Remount system as ro if needbe
  $MAGISK || mount -o ro,remount $ROOT/system
  exit $?
}

api_level_arch_detect() {
  API=`grep_prop ro.build.version.sdk`
  ABI=`grep_prop ro.product.cpu.abi | cut -c-3`
  ABI2=`grep_prop ro.product.cpu.abi2 | cut -c-3`
  ABILONG=`grep_prop ro.product.cpu.abi`
  ARCH=arm
  IS64BIT=false
  if [ "$ABI" = "x86" ]; then ARCH=x86; fi;
  if [ "$ABI2" = "x86" ]; then ARCH=x86; fi;
  if [ "$ABILONG" = "arm64-v8a" ]; then ARCH=arm64; IS64BIT=true; fi;
  if [ "$ABILONG" = "x86_64" ]; then ARCH=x64; IS64BIT=true; fi;
}

grep_prop() {
  REGEX="s/^$1=//p"
  shift
  FILES=$@
  [ -z "$FILES" ] && FILES='/system/build.prop'
  sed -n "$REGEX" $FILES 2>/dev/null | head -n 1
}

set_perm() {
  chown $2:$3 $1 || return 1
  chmod $4 $1 || return 1
  [ -z $5 ] && chcon 'u:object_r:system_file:s0' $1 || chcon $5 $1 || return 1
}



# Device Info
# BRAND MODEL DEVICE API ABI ABI2 ABILONG ARCH
BRAND=$(getprop ro.product.brand)
MODEL=$(getprop ro.product.model)
DEVICE=$(getprop ro.product.device)
ROM=$(getprop ro.build.display.id)
api_level_arch_detect

# Version Number
VER=$(grep_prop version $MODPATH/module.prop)
# Version Code
REL=$(grep_prop versionCode $MODPATH/module.prop)
# Author
AUTHOR=$(grep_prop author $MODPATH/module.prop)
# Mod Name/Title
MODTITLE=$(grep_prop name $MODPATH/module.prop)

# Colors
G='\e[01;32m'		# GREEN TEXT
R='\e[01;31m'		# RED TEXT
Y='\e[01;33m'		# YELLOW TEXT
B='\e[01;34m'		# BLUE TEXT
V='\e[01;35m'		# VIOLET TEXT
Bl='\e[01;30m'		# BLACK TEXT
C='\e[01;36m'		# CYAN TEXT
W='\e[01;37m'		# WHITE TEXT
BGBL='\e[1;30;47m'	# Background W Text Bl
N='\e[0m'			# How to use (example): echo "${G}example${N}"
loadBar=' '			# Load UI
# Remove color codes if -nc or in ADB Shell
[ -n "$1" -a "$1" == "-nc" ] && shift && NC=true
[ "$NC" -o -n "$LOGNAME" ] && {
	G=''; R=''; Y=''; B=''; V=''; Bl=''; C=''; W=''; N=''; BGBL=''; loadBar='=';
}

# Divider (based on $MODTITLE, $VER, and $REL characters)
character_no=$(echo $MODTITLE $VER $REL | tr " " '_' | wc -c)
div="${Bl}$(printf '%*s' "${character_no}" '' | tr " " "=")${N}"

# Title Div
title_div() {
	no=$(echo $@ | wc -c)
	extdiv=$((no-character_no))
	echo "${W}$@${N} ${Bl}$(printf '%*s' "$extdiv" '' | tr " " "=")${N}"
}

# set_file_prop <property> <value> <prop.file>
set_file_prop() {
	sed -i "s/${1}=.*/${1}=${2}/g" $3
}

# https://github.com/fearside/ProgressBar
ProgressBar() {
# Process data
	_progress=$(((${1}*100/${2}*100)/100))
	_done=$(((${_progress}*4)/10))
	_left=$((40-$_done))
# Build progressbar string lengths
	_done=$(printf "%${_done}s")
	_left=$(printf "%${_left}s")

# 1.2 Build progressbar strings and print the ProgressBar line
# 1.2.1 Output example:
# 1.2.1.1 Progress : [########################################] 100%
printf "\rProgress : ${BGBL}|${N}${_done// /${BGBL}$loadBar${N}}${_left// / }${BGBL}|${N} ${_progress}%%"
}

#https://github.com/fearside/SimpleProgressSpinner
Spinner() {

# Choose which character to show.
case ${_indicator} in
	"|") _indicator="/";;
	"/") _indicator="-";;
	"-") _indicator="\\";;
	"\\") _indicator="|";;
	# Initiate spinner character
	*) _indicator="\\";;
esac

# Print simple progress spinner
printf "\r${@} [${_indicator}]"
}

# "cmd & spinner [message]"
e_spinner() {
	PID=$!
	h=0; anim='-\|/';
	while [ -d /proc/$PID ]; do
		h=$(((h+1)%4))
		sleep 0.02
		printf "\r${@} [${anim:$h:1}]"
	done
}

# test_connection
test_connection() {
	echo -n "Testing internet connection "
	ping -q -c 1 -W 1 google.com >/dev/null 2>/dev/null && echo "- OK" || { echo "Error"; false; }
}

# Log files will be uploaded to termbin.com
upload_logs() {
	$BBok && {
		test_connection
		[ $? -ne 0 ] && exit
		verUp=none; oldverUp=none; logUp=none; oldlogUp=none;
		echo "Uploading logs"
		[ -s $VERLOG ] && verUp=$(cat $VERLOG | nc termbin.com 9999)
		[ -s $oldVERLOG ] && oldverUp=$(cat $oldVERLOG | nc termbin.com 9999)
		[ -s $LOG ] && logUp=$(cat $LOG | nc termbin.com 9999)
		[ -s $oldLOG ] && oldlogUp=$(cat $oldLOG | nc termbin.com 9999)
		echo -n "Link: "
		echo "$MODEL ($DEVICE) API $API\n$ROM\n$ID\n
		O_Verbose: $oldverUp
		Verbose:   $verUp
	
		O_Log: $oldlogUp
		Log:   $logUp" | nc termbin.com 9999
	} || echo "Busybox not found!"
	exit
}

# Heading
mod_head() {
	clear
	echo "$div"
	echo "${W}$MODTITLE $VER${N}(${Bl}$REL${N})"
	echo "by ${W}$AUTHOR${N}"
	echo "$div"
	echo "${W}$_bbname${N}"
	echo "${Bl}$_bb${N}"
	echo "$div"
	[ -s $LOG ] && echo "Enter ${W}logs${N} to upload logs" && echo $div
}

#=========================== Main
# > You can start your MOD here.
# > You can add functions, variables & etc.
# > Rather than editing the default vars above.

SDCARD=/storage/emulated/0
CRYS=$SDCARD/IceWizard/Presets/CRYSTALLINE/icesoundpresets.def
BATH=$SDCARD/IceWizard/Presets/BATHSALTS/icesoundpresets.def
DEEP=$SDCARD/IceWizard/Presets/DEEPBASS/icesoundpresets.def
DEF=$SDCARD/IceWizard/Presets/DEFAULT/icesoundpresets.def
HOLY=$SDCARD/IceWizard/Presets/HOLY/icesoundpresets.def
KZY=$SDCARD/IceWizard/Presets/KRAZY/icesoundpresets.def
MOV=$SDCARD/IceWizard/Presets/MOVIE/icesoundpresets.def
MUS=$SDCARD/IceWizard/Presets/MUSIC2/icesoundpresets.def
OUT=$SDCARD/IceWizard/Presets/OUTDOORS/icesoundpresets.def
PURE=$SDCARD/IceWizard/Presets/PURE/icesoundpresets.def
PS=$SDCARD/IceWizard/Presets/PURESTUFF/icesoundpresets.def
SHAT=$SDCARD/IceWizard/Presets/SHAT/icesoundpresets.def
WIDE=$SDCARD/IceWizard/Presets/WIDECLARITY/icesoundpresets.def
STOCK=$SDCARD/IceWizard/Presets/STOCK/icesoundpresets.def
ICEO=$SDCARD/IceWizard/LibOreo/libicepower.so
ICEN=$SDCARD/IceWizard/LibNougat/libicepower.so
PROP1=ro.asus.aw.mode.path=1
PROP2=ro.asus.aw.mode.path=0
PROP3=ro.asus.aw.mode.path=6
CONF1=$SDCARD/IceWizard/Configs/1/icesoundconfig.def
CONF2=$SDCARD/IceWizard/Configs/2/icesoundconfig.def
CONF3=$SDCARD/IceWizard/Configs/3/icesoundconfig.def
CONF4=$SDCARD/IceWizard/Configs/4/icesoundconfig.def
PLAYERS=(
com.spotify.music
com.google.android.music
com.neutroncode.mp
com.neutroncode.mpeval
com.maxmpz.audioplayer
com.pandora.android
com.apple.android.music
com.clearchannel.iheartradio.controller
com.aspiro.tidal
)
#SPOT=com.spotify.music
#GPM=com.google.android.music
#NEU=com.neutroncode.mp
#NEU2=com.neutroncode.mpeval
#AMP=com.maxmpz.audioplayer
#PAN=com.pandora.android
#APPL=com.apple.android.music
#HEAR=com.clearchannel.iheartradio.controller
#TID=com.aspiro.tidal
ASUS=com.asus.maxxaudio.audiowizard
XML=/data/system/packages.xml
VEN=/system/vendor
SYS=/system
if [ -f $VEN/build.prop ]; then BUILDS="/system/build.prop $VEN/build.prop"; else BUILDS="/system/build.prop"; fi

config_menu() {
choice=""

while [ "$choice" != "q" ]
  do
    clear
  	echo "$div"
    title_div "${G}ICEWIZARD CONFIGS${N}"
    echo "$div"
    echo ""
  	echo "${B}make sure to choose killall option before exiting to apply settings!${N}"
  	echo "${B}Please choose skip config if the config you are using already works${N}"
  	echo "${B}Please make a selection!${N}"
    echo "$div"
  	echo -e "${W}1)${N} ${B}Config 1${N}"
  	echo -e "${W}2)${N} ${B}Config 2${N}"
  	echo -e "${W}3)${N} ${B}Config 3${N}"
    echo -e "${W}4)${N} ${B}Config 4${N}"
    echo -e "${W}5)${N} ${B}No Config${N}"
  	echo -e "${W}x)${N} ${B}Return to Menu${N}"
  	echo -e "${W}q)${N} ${B}Quit${N}"
    echo "$div"
  	echo -n "${R}[CHOOSE] :  ${N}"

read -r choice
  case $choice in
    '1') echo "${G}Config 1 selected...${N}"
      cp -rf $CONF1 $MODPATH/system/etc
      sed -ri "s/Config([0-9])/Config (1)/" $MODPROP
      set_perm $MODPATH/system/etc/icesoundconfig.def 0 0 0755
      kill_all_command
      echo "${G}Config 1 Applied Successfully...${N}"
      break
      ;;
    '2') echo "${G}Config 2 selected...${N}"
      cp -rf $CONF2 $MODPATH/system/etc
      sed -ri "s/Config([0-9])/Config (2)/" $MODPROP
      set_perm $MODPATH/system/etc/icesoundconfig.def 0 0 0755
      kill_all_command
      echo "${G}Config 2 Applied Successfully...${N}"
      break
      ;;
    '3') echo "${G}Config 3 selected...${N}"
      cp -rf $CONF3 $MODPATH/system/etc
      sed -ri "s/Config([0-9])/Config (3)/" $MODPROP
      set_perm $MODPATH/system/etc/icesoundconfig.def 0 0 0755
      kill_all_command
      echo "${G}Config 3 Applied Successfully...${N}"
      break
      ;;
		'4') echo "${G}Config 4 selected...${N}"
      cp -rf $CONF4 $MODPATH/system/etc
      sed -ri "s/Config([0-9])/Config (4)/" $MODPROP
      set_perm $MODPATH/system/etc/icesoundconfig.def 0 0 0755
      kill_all_command
      echo "${G}Config 4 Applied Successfully...${N}"
		  break
		  ;;
    '5') echo "${G}No Config Selected...${N}"
      rm -f $MODPATH/system/etc/icesoundconfig.def
      sed -ri "s/Config([0-9])/Config (0)/" $MODPROP
      kill_all_command
      echo "${B}No Config Applied Successfully. This Option May or May Not Allow ICESound to Process. This is Mainly for Expirementing with icesoundconfig"
      break
      ;;
    x|X) echo "${C}Returning to Menu${N}"
      menu
      ;;
    q|Q) echo "${R}quiting!${N}"
      clear
      quit
      ;;
    *) echo "${Y}item not available! Try Again${N}"
      clear
      ;;
  	esac
  done
echo -n "${C}Return to menu? < y | n > : ${N}"
read -r mchoice
[ "$mchoice" = "y" ] && menu || clear && quit
}

presets_menu() {
  choice=""

while [ "$choice" != "q" ];
  do
    clear
    echo "$div"
    title_div "${G}ICEWIZARD PRESETS${N}"
    echo "$div"
    echo "${B}Please choose a Preset to change audio effect${N}"
    echo "${B}Please make a selection!${N}"
    echo "$div"
    echo ""
    echo -e "${W}0)${N} ${B}Crystalline${N}"
    echo -e "${W}1)${N} ${B}Bathsalts${N}"
    echo -e "${W}2)${N} ${B}DeepBass${N}"
    echo -e "${W}3)${N} ${B}Default${N}"
    echo -e "${W}4)${N} ${B}Holy${N}"
    echo -e "${W}5)${N} ${B}Krazy${N}"
    echo -e "${W}6)${N} ${B}Movie${N}"
    echo -e "${W}7)${N} ${B}Music${N}"
    echo -e "${W}8)${N} ${B}Outdoors${N}"
    echo -e "${W}9)${N} ${B}Pure${N}"
    echo -e "${W}10)${N} ${B}Purestuff${N}"
    echo -e "${W}11)${N} ${B}Shat${N}"
    echo -e "${W}12)${N} ${B}Wideclarity${N}"
    echo -e "${W}13)${N} ${B}Stock${N}"
    echo -e "${W}r)${N} ${B}Return to Menu${N}"
    echo -e "${W}q)${N} ${B}Quit${N}"
    echo "$div"
    echo -n "${R}[CHOOSE] :  ${N}"

read -r choice
  case $choice in
    '0') echo "${G}Crystalline selected...${N}"
      sed -ri "s/Preset [^)]+\)/Preset (Crystalline)/" $MODPROP
      cp -rf $CRYS $MODPATH/system/etc
			cp -rf $CRYS $MODPATH/system/vendor/etc
      set_perm $MODPATH/system/etc/icesoundpresets.def 0 0 0755
			set_perm $MODPATH/system/vendor/icesoundpresets.def 0 0 0755
      kill_all_command
      break
      ;;
    '1') echo "${G}Bathsalts selected...${N}"
      sed -ri "s/Preset [^)]+\)/Preset (BathSalts)/" $MODPROP
      cp -rf $BATH $MODPATH/system/etc
			cp -rf $BATH $MODPATH/system/vendor/etc
      set_perm $MODPATH/system/etc/icesoundpresets.def 0 0 0755
			set_perm $MODPATH/system/vendor/etc/icesoundpresets.def 0 0 0755
      kill_all_command
      break
      ;;
    '2') echo "${G}DeepBass selected...${N}"
	    sed -ri "s/Preset [^)]+\)/Preset (DEEPBASS)/" $MODPROP
      cp -rf $DEEP $MODPATH/system/etc
			cp -rf $DEEP $MODPATH/system/vendor/etc 
      set_perm $MODPATH/system/etc/icesoundpresets.def 0 0 0755
			set_perm $MODPATH/system/vendor/etc/icesoundpresets.def 0 0 0755
      kill_all_command
      break
      ;;
    '3') echo "${G}Default selected...${N}"
      sed -ri "s/Preset [^)]+\)/Preset (DEFAULT)/" $MODPROP
      cp -rf $DEF $MODPATH/system/etc
			cp -rf $DEF $MODPATH/system/vendor/etc 
      set_perm $MODPATH/system/etc/icesoundpresets.def 0 0 0755
			set_perm $MODPATH/system/vendor/etc/icesoundpresets.def 0 0 0755
      kill_all_command
      break
      ;;
	  '4') echo "${G}Holy selected...${N}"
      sed -ri "s/Preset [^)]+\)/Preset (HOLY)/" $MODPROP
      cp -rf $HOLY $MODPATH/system/etc
			cp -rf $HOLY $MODPATH/system/vendor/etc
      set_perm $MODPATH/system/etc/icesoundpresets.def 0 0 0755
			set_perm $MODPATH/system/vendor/etc/icesoundpresets.def 0 0 0755
      kill_all_command
      break
      ;;
	  '5') echo "${G}Krazy selected...${N}"
      sed -ri "s/Preset [^)]+\)/Preset (KRAZY)/" $MODPROP
      cp -rf $KZY $MODPATH/system/etc
			cp -rf $KZY $MODPATH/system/vendor/ETC
      set_perm $MODPATH/system/etc/icesoundpresets.def 0 0 0755
			set_perm $MODPATH/system/vendor/etc/icesoundpresets.def 0 0 0755
      kill_all_command
      break
      ;;
    '6') echo "${G}Movie selected...${N}"
      sed -ri "s/Preset [^)]+\)/Preset (MOVIE)/" $MODPROP
      cp -rf $MOV $MODPATH/system/etc
			cp -rf $MOV $MODPATH/system/vendor/etc
      set_perm $MODPATH/system/etc/icesoundpresets.def 0 0 0755
			set_perm $MODPATH/system/vendor/etc/icesoundpresets.def 0 0 0755
      kill_all_command
      break
      ;;
    '7') echo "${G}Music selected...${N}"
      sed -ri "s/Preset [^)]+\)/Preset (MUSIC)/" $MODPROP
      cp -rf $MUS $MODPATH/system/etc
			cp -rf $MUS $MODPATH/system/vendor/etc
      set_perm $MODPATH/system/etc/icesoundpresets.def 0 0 0755
			set_perm $MODPATH/system/vendor/etc/icesoundpresets.def 0 0 0755
      kill_all_command
      break
      ;;
    '8') echo "${G}Outdoors selected...${N}"
      sed -ri "s/Preset [^)]+\)/Preset (OUTDOORS)/" $MODPROP
      cp -rf $OUT $MODPATH/system/etc
			cp -rf $OUT $MODPATH/system/vendor/etc
      set_perm $MODPATH/system/etc/icesoundpresets.def 0 0 0755
			set_perm $MODPATH/system/vendor/etc/icesoundpresets.def 0 0 0755
      kill_all_command
      break
      ;;
    '9') echo "${G}Pure selected...${N}"
      sed -ri "s/Preset [^)]+\)/Preset (PURE)/" $MODPROP
      cp -rf $PURE $MODPATH/system/etc
			cp -rf $PURE $MODPATH/system/vendor/etc
      set_perm $MODPATH/system/etc/icesoundpresets.def 0 0 0755
			set_perm $MODPATH/system/vendor/etc/icesoundpresets.def 0 0 0755
      kill_all_command
      break
      ;;
    '10') echo "${G}Purestuff selected...${N}"
      sed -ri "s/Preset [^)]+\)/Preset (PURESTUFF)/" $MODPROP
      cp -rf $PS $MODPATH/system/etc
			cp -rf $PS $MODPATH/system/vendor/etc
      set_perm $MODPATH/system/etc/icesoundpresets.def 0 0 0755
			set_perm $MODPATH/system/vendor/etc/icesoundpresets.def 0 0 0755
      kill_all_command
      break
      ;;
    '11') echo "${G}Shat selected...${N}"
      sed -ri "s/Preset [^)]+\)/Preset (SHAT)/" $MODPROP
      cp -rf $SHAT $MODPATH/system/etc
			cp -rf $SHAT $MODPATH/system/vendor/etc
      set_perm $MODPATH/system/etc/icesoundpresets.def 0 0 0755
			set_perm $MODPATH/system/vendor/etc/icesoundpresets.def 0 0 0755
      kill_all_command
      break
      ;;
    '12') echo "${G}Wideclarity selected...${N}"
      sed -ri "s/Preset [^)]+\)/Preset (WIDE)/" $MODPROP
      cp -rf $WIDE $MODPATH/system/etc
			cp -rf $WIDE $MODPATH/system/vendor/etc
      set_perm $MODPATH/system/etc/icesoundpresets.def 0 0 0755
			set_perm $MODPATH/system/vendoretc/icesoundpresets.def 0 0 0755
      kill_all_command
      break
      ;;
		'13') echo "${G}Stock selected...${N}"
      sed -ri "s/Preset [^)]+\)/Preset (STOCK)/" $MODPROP
      cp -rf $STOCK $MODPATH/system/etc
			cp -rf $STOCK $MODPATH/system/vendor/etc
      set_perm $MODPATH/system/etc/icesoundpresets.def 0 0 0755
			set_perm $MODPATH/system/vendor/etc/icesoundpresets.def 0 0 0755
      kill_all_command
      break
      ;;
		'r') echo "${C}Returning to Menu...${N}"
      menu
      ;;
  	'q') echo "${R}quiting!...${N}"
      clear
   	  quit
		  ;;
    '*') echo "${Y}item not available! Try Again...${N}"
      clear
		  ;;
    esac
  done
echo -n "${C}Return to menu? < y | n > : ${N}"
read -r mchoice
[ "$mchoice" = "y" ] && menu || clear && quit
}

kill_all_menu() {
choice=""

while [ "$choice" != "q" ]
  do
    clear
    echo "$div"
    title_div "${G}ICEWIZARD KILLING${N}"
    echo "$div"
    echo ""
    echo "${B}choose killall to apply the preset/config!${N}"
    echo "${B}if killall does nothing choose another config!${N}"
    echo "${B}you may also reboot if you wish${N}"
    echo "$div"
    echo -e "${W}t)${N} ${B}Test Config Compatibility by Killing IceSound${N}"
    echo -e "${W}k)${N} ${B}killall${N}"
    echo -e "${W}r)${N} ${B}Reboot${N}"
    echo -e "${W}x)${N} ${B}Return to Menu${N}"
    echo -e "${W}q)${N} ${B}Quit${N}"
    echo "$div"
    echo -n "${R}[CHOOSE] :  ${N}"

read -r choice
  case $choice in
		t|T) echo "${W}Test Compatibility selected...${N}"
		  killall dk.icepower.icesound
			sleep 7
			echo "${G}If You Heard a Beep Or Audio Cut Out, Then This is the Config You Need To Use/is Compatible With your device${N}"
			break
		  ;;
		k|K) echo "${V}Killall selected...${N}"
		  kill_all_command
		  break
		  ;;
		r|R) echo "${R}Reboot selected...${N}"
		  setprop sys.powerctl reboot
		  sleep 15
		  echo "${W}Reboot Failed! Please Reboot Manually${N}"
		  ;;
		x|X) echo "${C}Returning to Menu...${N}"
		  menu
		  ;;
    q|Q) echo "${R}quiting!${N}"
      clear
      quit
      ;;
    *) echo "${Y}item not available! Try Again${N}"
      clear
	    ;;
    esac
  done
echo -n "${R}Return to menu? < y | n > : ${N}"
read -r mchoice
[ "$mchoice" = "y" ] && menu || clear && quit
}


#Kill commands to apply selected config
kill_all_command() {
	echo "${B}   Please Wait for Background Services to be Restarted...${N}"
  echo " "
	echo "${B}   Stopping services...${N}"
	ProgressBar 1 3

	for i in "${PLAYERS[@]}"; do
		if grep -qF $i $XML; then
      echo " "
			echo "${B}   Closing Out $i to Prevent a Force Reboot...${N}"
			am force-stop $i
		fi
	done

	sleep 1
  echo " "
  echo "${B}   Stopping ICEsound...${N}"
    stop dk.icepower.icesound
    ProgressBar 2 3
  echo " "
  echo "${B}   Restarting services...${N}"
  echo " "
  sleep 2
  echo "${B}   Starting ICEsound...${N}"
    start dk.icepower.icesound
    sleep 2
  echo " "
	ProgressBar 3 3
	echo " "
	echo "${B}   All Backgrounds Services Have Been Restarted!...${N}"
  echo " "
	echo "${B}   Enjoy Your New Preset or Config...${N}"
}

prop_menu() {
choice=""

while [ "$choice" != "q" ]
  do
    clear
  	echo "$div"
    title_div "${G}ICEWIZARD PROPS${N}"
    echo "$div"
    echo ""
    echo "${B}FULL ICEWIZARD (UI) ONLY!!!!!${N}"
    echo "${B}The Following Options were the Props that were in the IceSound.prop File in Previous Versions${N}"
    echo "${B}Since These are Build.prop Props, Unfortunately Theres NO WAY to Apply These Without Rebooting${N}"
    echo "${B}Make Sure Every Thing You Have Opened is SAVED${N}"
    echo "${B}After Selecting a Prop the Device WILL HOT REBOOT${N}"
    echo "${B}ICEWIZARD TEAM IS NOT RESPONSIBLE FOR LOST FILES ETC....${N}"
    echo "${B}YOU HAVE BEEN WARNED${N}"
    echo "${B}Prop Mode 2 Was the Default in Previous Versions${N}"
  	echo "${B}Please make a selection!${N}"
    echo "$div"
  	echo -e "${W}1)${N} ${B}Prop Mode 1 (3D)${N}"
  	echo -e "${W}2)${N} ${B}Prop Mode 2 (More 3D)${N}"
  	echo -e "${W}3)${N} ${B}Prop Mode Off${N}"
    echo "$div"
  	echo -e "${W}x)${N} ${B}Return to Menu${N}"
  	echo -e "${W}q)${N} ${B}Quit${N}"
    echo "$div"
  	echo -n "${R}[CHOOSE] :  ${N}"

read -r choice
  case $choice in
    1) echo "${B}Prop Mode 1 selected...${N}"
      sed -i -e 's/ro.asus.aw.mode/ro.asus.aw.mode=1/' $PROP
      echo "${G}Device will now hot reboot${N}"
			sleep 8
      setprop ctl.restart zygote
      break
      ;;
    2) echo "${B}Prop Mode 2 selected...${N}"
      sed -i -e 's/ro.asus.aw.mode/ro.asus.aw.mode=0/' $PROP
		  echo "${G}Device will now hot reboot${N}"
			sleep 8
		  setprop ctl.restart zygote
		  break
      ;;
    3) echo "${B}Prop Mode 3 selected...${N}"
      sed -i -e 's/ro.asus.aw.mode/ro.asus.aw.mode=6/' $PROP
		  echo "${G}Device will now hot reboot${N}"
			sleep 8
		  setprop ctl.restart zygote
      break
      ;;
    x|X) echo "${C}Returning to Menu${N}"
      menu
      ;;
    q|Q) echo "${R}quiting!${N}"
      clear
      quit
      ;;
    *) echo "${Y}item not available! Try Again${N}"
      clear
      ;;
  	esac
  done
echo -n "${R}Return to menu? < y | n > : ${N}"
read -r mchoice
[ "$mchoice" = "y" ] && menu || clear && quit
}

lib_menu () {
	choice=""

while [ "$choice" != "q" ]
  do
    clear
  	echo "$div"
    title_div "${G}ICESOUND LIBS${N}"
    echo "$div"
    echo ""
    echo "${B}FULL ICEWIZARD (UI) ON NOUGAT ONLY!!!!!${N}"
    echo "${B}If AudioWizard is not changing sound,
		Then please change the libicepower.so to the oreo or nougat one. 
		The nougat one is installed by default during installion.
		Some nougat devices can use the oreo one and others the nougat one${N}"		
  	echo "${B}Please make a selection!${N}"
    echo "$div"
  	echo -e "${W}1)${N} ${B}Oreo libicepower.so${N}"
  	echo -e "${W}2)${N} ${B}Nougat libicepower.so${N}"
    echo "$div"
  	echo -e "${W}x)${N} ${B}Return to Menu${N}"
  	echo -e "${W}q)${N} ${B}Quit${N}"
    echo "$div"
  	echo -n "${R}[CHOOSE] :  ${N}"

read -r choice
  case $choice in
    1) echo "${B}Oreo libicepower.so selected...${N}"
      rm -f $MODPATH/system/lib/soundfx/libicepower.so
			cp $LIBO $MODPATH/system/lib/soundfx/libicepower.so
			sed -ri "s/Lib [^)]+\)/Lib (OREO)/" $MODPROP
      echo "${G}Device will now hot reboot${N}"
			sleep 8
      setprop ctl.restart zygote
      break
      ;;
    2) echo "${B}Nougat libicepower.so selected...${N}"
      rm -f $MODPATH/system/lib/soundfx/libicepower.so
			cp $LIBN $MODPATH/system/lib/soundfx/libicepower.so
			sed -ri "s/Lib [^)]+\)/Lib (NOUGAT)/" $MODPROP
		  echo "${G}Device will now hot reboot${N}"
			sleep 8
		  setprop ctl.restart zygote
		  break
      ;;
    x|X) echo "${C}Returning to Menu${N}"
      menu
      ;;
    q|Q) echo "${R}quiting!${N}"
      clear
      quit
      ;;
    *) echo "${Y}item not available! Try Again${N}"
      clear
      ;;
  	esac
  done
echo -n "${R}Return to menu? < y | n > : ${N}"
read -r mchoice
[ "$mchoice" = "y" ] && menu || clear && quit
}

menu() {
choice=""

while [ "$choice" != "q" ]
  do  	
  mod_head
    echo ""
    title_div "${G}ICEWIZARD MAIN MENU${N}"
    echo "$div"
    echo ""
    echo "${G}Please make a Selection${N}"
    echo -e "${W}C)${N} ${B}Configs${N}"
    echo -e "${W}P)${N} ${B}Presets${N}"
    echo -e "${W}K)${N} ${B}KillAll${N}"
    [ -d "$MODPATH/system/app/AudioWizardView" ] && echo -e "${W}I)${N} ${B}IceWizard Props${N}"
    if [ $API -le 25 ]; then
		echo -e "${G}If AudioWizard Presets dont change sound then change the libicepower.so and reboot${N}"
		echo -e "${W}N)${N} ${B}Change libicepower.so"
		fi
		echo -e "${W}L)${N} ${B}Logs${N}"
    echo -e "${W}Q)${N} ${B}Quit${N}"
    echo "$div"
    echo -n "${R}[CHOOSE] :  ${N}"

read -r choice
  case $choice in
    c|C) echo "${G}Configs selected...${N}"
      config_menu
      ;;
    p|P) echo "${B}Presets selected...${N}"
      presets_menu
      ;;
    k|K) echo "${C}KillAll selected...${N}"
      kill_all_menu
      ;;
    i|I) echo "${W}IceWizard Props Selected...${N}"
      prop_menu
      ;;
		n|N) echo "${C}Change libicepower.so Selected...${N}"
		  lib_menu
			;;
    l|L) echo "${V}Uploding Logs to termbin...${N}"
      upload_logs
      ;;
    q|Q) echo "${R}Quiting...${N}"
      clear
      quit
      ;;
    *) echo "${Y}item not available! Try Again${N}"
      sleep 1.5
      clear
      ;;
    esac
  done
}

menu

quit $?
